/*
 * FeverTokens API
 * fevertokens-api
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: dev@fevertokens.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T15:30:38.523246800+01:00[GMT+01:00]")
public class ProjectData {
  public static final String SERIALIZED_NAME_PROJECT_TYPE = "projectType";
  @SerializedName(SERIALIZED_NAME_PROJECT_TYPE)
  private String projectType;

  public static final String SERIALIZED_NAME_PROJECT_CONTENT_TYPE = "projectContentType";
  @SerializedName(SERIALIZED_NAME_PROJECT_CONTENT_TYPE)
  private String projectContentType;

  public static final String SERIALIZED_NAME_CUSTOM_U_I = "customUI";
  @SerializedName(SERIALIZED_NAME_CUSTOM_U_I)
  private Object customUI;

  public ProjectData() {
  }

  public ProjectData projectType(String projectType) {
    
    this.projectType = projectType;
    return this;
  }

   /**
   * Type of the project
   * @return projectType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of the project")

  public String getProjectType() {
    return projectType;
  }


  public void setProjectType(String projectType) {
    this.projectType = projectType;
  }


  public ProjectData projectContentType(String projectContentType) {
    
    this.projectContentType = projectContentType;
    return this;
  }

   /**
   * Content type of the project
   * @return projectContentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content type of the project")

  public String getProjectContentType() {
    return projectContentType;
  }


  public void setProjectContentType(String projectContentType) {
    this.projectContentType = projectContentType;
  }


  public ProjectData customUI(Object customUI) {
    
    this.customUI = customUI;
    return this;
  }

   /**
   * Custom UI of the project
   * @return customUI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom UI of the project")

  public Object getCustomUI() {
    return customUI;
  }


  public void setCustomUI(Object customUI) {
    this.customUI = customUI;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectData projectData = (ProjectData) o;
    return Objects.equals(this.projectType, projectData.projectType) &&
        Objects.equals(this.projectContentType, projectData.projectContentType) &&
        Objects.equals(this.customUI, projectData.customUI);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectType, projectContentType, customUI);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectData {\n");
    sb.append("    projectType: ").append(toIndentedString(projectType)).append("\n");
    sb.append("    projectContentType: ").append(toIndentedString(projectContentType)).append("\n");
    sb.append("    customUI: ").append(toIndentedString(customUI)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectType");
    openapiFields.add("projectContentType");
    openapiFields.add("customUI");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ProjectData.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectData is not found in the empty JSON string", ProjectData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProjectData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("projectType") != null && !jsonObj.get("projectType").isJsonNull()) && !jsonObj.get("projectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectType").toString()));
      }
      if ((jsonObj.get("projectContentType") != null && !jsonObj.get("projectContentType").isJsonNull()) && !jsonObj.get("projectContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectContentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectData.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectData>() {
           @Override
           public void write(JsonWriter out, ProjectData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectData
  * @throws IOException if the JSON string is invalid with respect to ProjectData
  */
  public static ProjectData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectData.class);
  }

 /**
  * Convert an instance of ProjectData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

