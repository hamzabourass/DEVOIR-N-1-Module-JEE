/*
 * FeverTokens API
 * fevertokens-api
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: dev@fevertokens.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ProjectData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Project
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T15:30:38.523246800+01:00[GMT+01:00]")
public class Project {
  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_PROJECT_DESCRIPTION = "projectDescription";
  @SerializedName(SERIALIZED_NAME_PROJECT_DESCRIPTION)
  private String projectDescription;

  /**
   * Status of the project
   */
  @JsonAdapter(ProjectStatusEnum.Adapter.class)
  public enum ProjectStatusEnum {
    PUBLISHED("PUBLISHED");

    private String value;

    ProjectStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectStatusEnum fromValue(String value) {
      for (ProjectStatusEnum b : ProjectStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProjectStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROJECT_STATUS = "projectStatus";
  @SerializedName(SERIALIZED_NAME_PROJECT_STATUS)
  private ProjectStatusEnum projectStatus;

  public static final String SERIALIZED_NAME_PROJECT_DATA = "projectData";
  @SerializedName(SERIALIZED_NAME_PROJECT_DATA)
  private ProjectData projectData;

  public Project() {
  }

  public Project projectName(String projectName) {
    
    this.projectName = projectName;
    return this;
  }

   /**
   * Name of the project
   * @return projectName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the project")

  public String getProjectName() {
    return projectName;
  }


  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public Project projectDescription(String projectDescription) {
    
    this.projectDescription = projectDescription;
    return this;
  }

   /**
   * Description of the project
   * @return projectDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the project")

  public String getProjectDescription() {
    return projectDescription;
  }


  public void setProjectDescription(String projectDescription) {
    this.projectDescription = projectDescription;
  }


  public Project projectStatus(ProjectStatusEnum projectStatus) {
    
    this.projectStatus = projectStatus;
    return this;
  }

   /**
   * Status of the project
   * @return projectStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the project")

  public ProjectStatusEnum getProjectStatus() {
    return projectStatus;
  }


  public void setProjectStatus(ProjectStatusEnum projectStatus) {
    this.projectStatus = projectStatus;
  }


  public Project projectData(ProjectData projectData) {
    
    this.projectData = projectData;
    return this;
  }

   /**
   * Get projectData
   * @return projectData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProjectData getProjectData() {
    return projectData;
  }


  public void setProjectData(ProjectData projectData) {
    this.projectData = projectData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.projectName, project.projectName) &&
        Objects.equals(this.projectDescription, project.projectDescription) &&
        Objects.equals(this.projectStatus, project.projectStatus) &&
        Objects.equals(this.projectData, project.projectData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectName, projectDescription, projectStatus, projectData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    projectDescription: ").append(toIndentedString(projectDescription)).append("\n");
    sb.append("    projectStatus: ").append(toIndentedString(projectStatus)).append("\n");
    sb.append("    projectData: ").append(toIndentedString(projectData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectName");
    openapiFields.add("projectDescription");
    openapiFields.add("projectStatus");
    openapiFields.add("projectData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Project
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Project.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Project is not found in the empty JSON string", Project.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Project.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Project` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("projectName") != null && !jsonObj.get("projectName").isJsonNull()) && !jsonObj.get("projectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectName").toString()));
      }
      if ((jsonObj.get("projectDescription") != null && !jsonObj.get("projectDescription").isJsonNull()) && !jsonObj.get("projectDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectDescription").toString()));
      }
      if ((jsonObj.get("projectStatus") != null && !jsonObj.get("projectStatus").isJsonNull()) && !jsonObj.get("projectStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectStatus").toString()));
      }
      // validate the optional field `projectData`
      if (jsonObj.get("projectData") != null && !jsonObj.get("projectData").isJsonNull()) {
        ProjectData.validateJsonObject(jsonObj.getAsJsonObject("projectData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Project.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Project' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Project> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Project.class));

       return (TypeAdapter<T>) new TypeAdapter<Project>() {
           @Override
           public void write(JsonWriter out, Project value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Project read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Project given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Project
  * @throws IOException if the JSON string is invalid with respect to Project
  */
  public static Project fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Project.class);
  }

 /**
  * Convert an instance of Project to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

